#!/bin/sh
#
# Script (AppleIntelHD3000GraphicsFB) to patch the connector table data in AppleIntelSNBGraphicsFB
#
# Version 0.8 - Copyright (c) 2012 by RevoGirl <DutchHockeyGoalie@yahoo.com>
#

#
# Note: This script currently has one specific requirement, and that is that it 
#       expect to find "IGPU" in the ioreg output i.e. you have to fix your 
#       ACPI tables, or it will fail (I hope to also find a workaround for this).

#set -x # Used for tracing errors (can be put anywhere in the script).

#================================= GLOBAL VARS ==================================

#
# Set to 0 by default. Only meaningful for developers.
#
DEBUG=0

#
# Set to 0 by default. Eliminating the need of Xcode's nm
#
USE_NM=0

LC_SEGMENT=01000000
LC_SEGMENT_64=19000000

# targetVolume=""
# targetVolume="/Volumes/Lion 2 Boot"
targetVolume="/Volumes/Mountain Lion"

FILENAME="/AppleIntelSNBGraphicsFB.kext/Contents/MacOS/AppleIntelSNBGraphicsFB"

#
# Check if FileGuard is setup.
#
if [ -d /Extra/FileGuard/Files/System/Library/Extensions ]; 
    then
        #
        # Yes, then use that path.
        #
        TARGET_PATH="${targetVolume}/Extra/FileGuard/Files/System/Library/Extensions"
    else
        #
        # No, use the normal extensions path.
        #
        TARGET_PATH="${targetVolume}/System/Library/Extensions"
fi

TARGET_FILE="${TARGET_PATH}${FILENAME}"

#=============================== LOCAL FUNCTIONS ================================

function _readFile()
{
  #
  # Copy arguments into local variables with a more self explanatory name.
  #
  local offset=$1
  local length=$2

  echo `dd if="$TARGET_FILE" bs=1 skip=$offset count=$length 2> /dev/null | xxd -l $length -ps -c $length`
}

#--------------------------------------------------------------------------------

function _getSizeOfLoadCommands()
{
  local machHeaderData=$(_readFile $1 $2)

  # Example: x86_64 (OS X 10.7.2)
  #
  # 0123456789 123456789 123456789 123456789 123456789 123456789 123
  # cffaedfe07000001030000000b00000006000000780400008500000000000000
  #                                     xxXXxxXX
  # cffaedfe
  # 07000001
  # 03000000
  # 0b000000
  # 06000000
  # 78040000
  # 85000000
  # 00000000

  echo $((`echo 0x${machHeaderData:38:2}${machHeaderData:36:2}${machHeaderData:42:2}${machHeaderData:40:2}`))
}

#--------------------------------------------------------------------------------

function _getDataSegmentOffset()
{
  #
  # Copy arguments into local variables with a more self explanatory name.
  #
  local machOffset=$1
  local machHeaderLength=$2
  local architecture=$3

  #
  # Get size of load commands from mach header.
  #
  local sizeOfLoadCommands=$(_getSizeOfLoadCommands $machOffset $machHeaderLength)

  if [ $architecture == "i386" ];
      then
          local __DATA=000000000000
          let local sectionHeaderSize=68
      else
          local __DATA=5f5f44415441
          let local sectionHeaderSize=80
  fi

  local index=0
  local __data=5f5f64617461

  #
  # Main loop, used to search for the "__DATA" segment.
  #
  while [ $index -lt $sizeOfLoadCommands ]; do
      #
      # Initialize the file offset.
      #
      let local offset=($machOffset + $machHeaderLength + $index)

      #
      # Read LC (Load Command) header from file.
      #
      local commandHeader=$(_readFile $offset 28)

      #
      # Get command type from LC header.
      #
      local commandType=$((`echo 0x${commandHeader:6:2}${commandHeader:4:2}${commandHeader:2:2}${commandHeader:0:2}`))

      #
      # Get command size from LC header.
      #
      local commandSize=$((`echo 0x${commandHeader:14:2}${commandHeader:12:2}${commandHeader:10:2}${commandHeader:8:2}`))

      #
      # Get segment name from LC header.
      #
      local segmentName=`echo ${commandHeader:16:12}`

      if [ $DEBUG -eq 1 ]; then
          echo $commandHeader
          echo "Index: $index"
          echo "Command type: $commandType"
          echo "Command size: $commandSize"
          echo "Segment name: $segmentName"
      fi

      #
      # Check segment name (we are looking for "__DATA").
      #
      if [ $segmentName == $__DATA ];
          then
              if [ $DEBUG -eq 1 ]; then
                  echo "__DATA segment located"
              fi

              let local commandIndex=0

              #
              # Adjust offset, add size of LC_SEGMENT / LC_SEGMENT_64
              #
              if [ $architecture == "i386" ];
                  then
                     let local sectionOffset=($offset + 56)
                  else
                     let local sectionOffset=($offset + 72)
              fi

              #
              # Secondary loop, used to search for the "__data" section. 
              #
              while [ $commandIndex -lt $commandSize ]; do
                  local sectionHeader=$(_readFile $sectionOffset $sectionHeaderSize)

                  # Example: x86_64
                  # 5f5f6461746100000000000000000000
                  # 5f5f4441544100000000000000000000
                  # 0096020000000000
                  # a80d000000000000
                  # 00960200
                  # 04000000
                  # 00000000
                  # 00000000
                  # 00000000
                  # 00000000
                  # 00000000
                  # 00000000

                  # Example: i386
                  # 5f5f6461746100000000000000000000
                  # 5f5f4441544100000000000000000000
                  # 008f0200
                  # 2c0d0000
                  # 7c920200
                  # 04000000
                  # 98490300
                  # 02000000
                  # 00000000
                  # 00000000
                  # 00000000

                  sectionName=`echo ${sectionHeader:0:12}`

                  if [ $DEBUG -eq 1 ]; then
                      echo "Section header: $sectionHeader"
                      echo "Section name  : $sectionName"
                  fi

                  if [ $sectionName == $__data ];
                      then
                          if [ $DEBUG -eq 1 ]; then
                              echo "__data section located"
                          fi

                          if [ $architecture == "i386" ];
                              then
                                  dataOffset=$((`echo 0x${sectionHeader:86:2}${sectionHeader:84:2}${sectionHeader:82:2}${sectionHeader:80:2}`))
                              else
                                  dataOffset=$((`echo 0x${sectionHeader:102:2}${sectionHeader:100:2}${sectionHeader:98:2}${sectionHeader:96:2}`))
                          fi

                          if [ $DEBUG -eq 1 ];
                              then
                                  echo "Offset to data segment: $dataOffset"
                                  return
                              else
                                  echo $dataOffset
                                  return
                          fi

                      else
                          let local commandIndex=($commandIndex + $sectionHeaderSize)
                          let local sectionOffset=($sectionOffset + $sectionHeaderSize)
                  fi
              done
          else
              let local index=($index + $commandSize)
      fi
  done
}

#--------------------------------------------------------------------------------

function _getOffset()
{
  #
  # Copy arguments into local variables with a more self explanatory name.
  #
  local machOffset=$1
  local machHeaderLength=$2

  let offset=($machOffset + $machHeaderLength)
  local loadCommandHeader=$(_readFile $offset 8)

  # Example: i386 (OS X 10.8)
  #
  # 0123456789 123456789
  # 01000000e0020000
  #         xxXXxxXX
  #
  # 01000000
  # e0020000

  if [[ $loadCommandHeader =~ ^$LC_SEGMENT ]]; then
      let nextOffset=($offset + 32)
      fo=$(_readFile $nextOffset 4)
      echo $((`echo 0x${fo:6:2}${fo:4:2}${fo:2:2}${fo:0:2}`))
  fi

  if [[ $loadCommandHeader =~ ^$LC_SEGMENT_64 ]]; then
      let nextOffset=($offset + 40)
      fo=$(_readFile $nextOffset 4)
      echo $((`echo 0x${fo:6:2}${fo:4:2}${fo:2:2}${fo:0:2}`))

      #
      # RFE: Fix me (64-bit compatibility issue).
      #
  fi
}

#--------------------------------------------------------------------------------

function _getConnectorTableOffset()
{
  #
  # Copy arguments into local variables with a more self explanatory name.
  #
  local fileOffset=$1
  local machOffset=$2
  local machHeaderLength=$3
  local architecture=$4

  #
  # Check if Xcode is installed (not everyone will have xcode installed).
  #
  if [[ -e /usr/bin/nm && USE_NM -eq 1 ]];
      then
          #
          # Note: nm from Xcode 4.3 won't work with Mountain Lion (new LC type 0x2a/42)
          #
          echo `nm -t d -Ps __DATA __data -arch $architecture "$TARGET_FILE" | grep '_PlatformInformationList' | sed -e 's/_*[a-zA-Z] *//g' -e 's/ .//'`
      else
          #
          # Get offset to __DATA,__data from LC section header.
          #
          let segmentOffset=$(_getDataSegmentOffset $machOffset $machHeaderLength $architecture)

          #
          # Adjust offset to __DATA,__data (bit of a hack, might change it a next time).
          #
          if [ $architecture == "i386" ]; then
              if [ $fileOffset -gt 0 ]; then
                  let segmentOffset=($segmentOffset - $fileOffset)
              fi
          fi

          echo $segmentOffset
  fi
}

#--------------------------------------------------------------------------------

function _getSNBPlatformID()
{
  #
  # Will only work with patched ACPI tables (we need IGPU).
  #

  echo `ioreg -p IODeviceTree -n IGPU@2 -k AAPL,snb-platform-id | grep AAPL,snb-platform-id | sed -e 's/.*[<]//' -e 's/0\{0\}>$//'`
}

#--------------------------------------------------------------------------------

function _getConnectorTableNumber()
{
  #
  # Do we have a model identifier (command line argument) to work with?
  #

  if [ $1 ];
      then	# Yes, so let's use it.
          local snbPlatformID=$1
      else	# No, read value from 'AAPL,snb-platform-id'.
          local snbPlatformID=$(_getSNBPlatformID)
  fi

  #
  # Sanity check.
  #
  if [ $snbPlatformID ];
      then
          case $snbPlatformID in
              00000100)	# MacBookPro8,1
                  let tableNumber=0
                  ;;

              00000200)  # MacBookPro8,2 and MacBookPro8,3
                  let tableNumber=1
                  ;;

              10000300)  # Macmini5,1
                  let tableNumber=2
                  ;;

              20000300)  # Macmini5,2
                  let tableNumber=2
                  ;;

              30000300)  # Macmini5,3 using GFX0
                  let tableNumber=3
                  ;;

              00000400)  # MacBookAir4,1 and MacBookAir4,2
                  let tableNumber=4
                  ;;

              00000500)	# iMac12,1 and iMac12,2 using GFX0
                  let tableNumber=5 
                  ;;

              *)
                  echo -1
          esac
      else
          #
          # No "AAPL,snb-platform-id" property found. Fall back on model property.
          #
          let tableNumber=$(_getConnectorTableNumberByModelName)

          #
          # No model property found. Fall back on board-id property.
          #
          if [ ! $tableNumber ]; then
              let tableNumber=$(_getConnectorTableNumberByBoardID)
          fi
  fi

  echo $tableNumber
}

#--------------------------------------------------------------------------------

function _getModelName()
{
  echo `ioreg -p IODeviceTree -d 2 -k compatible | grep compatible | sed -e 's/ *"*=*<*>*//g' -e 's/compatible*//'`
}

#--------------------------------------------------------------------------------

function _getBoardID()
{
  echo `ioreg -p IODeviceTree -d 2 -k board-id | grep board-id | sed -e 's/ *"*=*<*>*//g' -e 's/board-id*//'`
}

#--------------------------------------------------------------------------------

function _getConnectorTableNumberByModelName()
{
  local modelName=$(_getModelName)

  case $modelName in
      MacBookPro8,1)
          let tableNumber=0
          ;;

      MacBookPro8,2)
          let tableNumber=1
          ;;

      MacBookPro8,3)
          let tableNumber=1
          ;;

      Macmini5,1)
          let tableNumber=2 
          ;;

      Macmini5,2)
          let tableNumber=2 
          ;;

      Macmini5,3) # Using GFX0 instead of IGPU
          let tableNumber=3
          ;;

      MacBookAir4,1)
          let tableNumber=4 
          ;;

      MacBookAir4,2)
          let tableNumber=4 
          ;;

      iMac12,1) # Using GFX0 instead of IGPU
          let tableNumber=5 
          ;;

      iMac12,2)
          let tableNumber=5 
          ;;
  esac

  echo $tableNumber
}

#--------------------------------------------------------------------------------

function _getConnectorTableNumberByBoardID()
{
  local boardID=$(_getBoardID)

  case $boardID in
      Mac-94245B3640C91C81)	# MacBookPro8,1
          let tableNumber=0
          ;;

      Mac-94245A3940C91C80)	# MacBookPro8,2
          let tableNumber=1
          ;;

      Mac-942459F5819B171B)	# MacBookPro8,3
          let tableNumber=1
          ;;

      Mac-8ED6AF5B48C039E1)	# Macmini5,1
          let tableNumber=2
          ;;

      Mac-4BC72D62AD45599E)	# Macmini5,2
          let tableNumber=2
          ;;

      Mac-7BA5B2794B2CDB12)	# Macmini5,3 / Using GFX0 instead of IGPU
          let tableNumber=3
          ;;

      Mac-C08A6BB70A942AC2)	# MacBookAir4,1
          let tableNumber=4 
          ;;

      Mac-742912EFDBEE19B3)	# MacBookAri4,2
          let tableNumber=4
          ;;

      Mac-942B5BF58194151B)	# iMac12,2 / Using GFX0 instead of IGPU
          let tableNumber=5
          ;;

      Mac-942B59F58194171B)	# iMac12,2)
          let tableNumber=5
          ;;
  esac

  echo $tableNumber
}

#--------------------------------------------------------------------------------

function main()
{
  #
  # Copy arguments into local variables with a more self explanatory name.
  #
  local action=$1
  local lipoData=(`lipo -detailed_info "${TARGET_FILE}"`)

  for item in $(seq 0 $((${#lipoData[@]} - 1)))
  do
      local data="${lipoData[$item]}"

      case $data in
          nfat_arch)
              let numOfArches=${lipoData[$item + 1]}

              if [ $DEBUG -eq 1 ]; then
                  echo "Targetfile: $TARGET_FILE"
                  echo "Number of Architectures: $numOfArches"
              fi
          ;;

          architecture)
              architecture=${lipoData[$item + 1]}

              if [ $DEBUG -eq 1 ];
                  then
                      echo "Architecture: $architecture"
                  else
                      echo ""
              fi

              if [ "$architecture" == "i386" ];
                  then
                      let machHeaderLength=28
                  else
                      let machHeaderLength=32
              fi
          ;;

          offset)
              let archOffset=${lipoData[$item + 1]}
              let fileOffset=$(_getOffset $archOffset $machHeaderLength)
              let sizeLoadCommands=$(_getSizeOfLoadCommands $archOffset $machHeaderLength)
              let connectorTableOffset=$(_getConnectorTableOffset $fileOffset $archOffset $machHeaderLength $architecture)
              let tableOffset=($(_getConnectorTableNumber) * 60)
              let skipBytes=($archOffset + $fileOffset + $connectorTableOffset + $tableOffset)

              if [ $DEBUG -eq 0 ]; then
                  echo "Offset to architecture          : $archOffset"
                  echo "Size of Load Commands           : $sizeLoadCommands"
                  echo "File offset from LoadCommand    : $fileOffset"
                  echo "Offset to connector table       : $connectorTableOffset"
                  echo "Offset to target connector table: $tableOffset"
                  echo "Connector table data for $architecture @ $skipBytes"
                  echo "----------------------------------------"
              fi

              case $action in
                  auto)
                      echo "This command is not yet implemented!"                      
                  ;;

                  extract)
                      dd if="$TARGET_FILE" bs=1 skip=$skipBytes count=60 2> /dev/null | xxd -c 12 > /tmp/hd3000-$architecture
                      cat /tmp/hd3000-$architecture
                  ;;

                  show)
                      dd if="$TARGET_FILE" bs=1 skip=$skipBytes count=60 2> /dev/null | xxd -c 12
                  ;;

                  replace)
                      echo "This command is not yet implemented!"
#                      xxd -c 12 -r "$2" >! /tmp/hd3000_connector_table
#                      dd if="$2" of="$TARGET_FILE" bs=1 seek=$skipBytes conv=notrunc
                  ;;

                  *)
                      echo "Unknown command given: $action"
              esac
          ;;
      esac
  done
}

#--------------------------------------------------------------------------------
#
# Only administrators (root) are allowed to run this script.
#
#--------------------------------------------------------------------------------

function _isRoot()
{
  if [ $(id -u) != 0 ]; then
      echo "This script must be run as root" 1>&2
      exit 1
  fi

  echo 1
}

#==================================== START =====================================

# if [ $(_isRoot) ]; then
  main $1 $2
# fi

#================================================================================

exit 0
