#!/bin/sh
#
# Script (daemon) to restore files from the FileGuard storage, after they
# have been removed and/or replaced by the OS X installer.
#
# Version 0.7 - Copyright (c) 2012 by RevoGirl <RevoGirl@rocketmail.com>
#

#
# Note: We <em>have</em> to do it the way I do it, this due to a possible race 
# condition â€“ stubborn among you may e-mail Quinn <eskimo1@apple.com> but I
# won't be surprised when you get pissed off by him (just trust me on this one).
#

#set -x # Used for tracing errors (can be put anywhere in the script).

#============================== CONFIGURATION VAR ===============================

MAXLOGSIZE=100000 # RFE (low prio): Add setting to 'com.fileguard.config.plist'

AUTOMATIC_SYNC=1 # New experimental feature (copies missing files to FileGuard).

#================================= GLOBAL VARS ==================================

fgConfigPlist=/Extra/FileGuard/com.fileguard.config.plist

EXTENSIONS_DIR=/System/Library/Extensions/

FILEGUARD_FILES=/Extra/FileGuard/Files  # Do <em>not</em> add a forward slash!
FILEGUARD_EXTENSIONS=${FILEGUARD_FILES}$EXTENSIONS_DIR

#=============================== LOCAL FUNCTIONS ================================

function _getChecksum()
{
   local result=`/sbin/md5 -q $1`
   echo "$result"
}

#--------------------------------------------------------------------------------

function _doDirectoryDiff()
{
  local result=`/usr/bin/diff -rq $1 $2 > /tmp/fgscratch`
  #
  # Check filesize (-s) of our scratch file.
  #
  if [ -s "/tmp/fgscratch" ];
      then
          echo 1 # Directory content is different.
      else
          echo 0 # Directory content is the same (empty scratch file).
  fi
}

#--------------------------------------------------------------------------------

function _shouldRestore()
{
  # Plain ordinary files can be checked with md5 (unlike directories).
  if [ -f $1 ]; then
      if [ $(_getChecksum $1) == $(_getChecksum $2) ];
          then
              echo 0 # "Same checksum, no restore required."
          else
              echo 1 # "Different checksum, restore required."
      fi
  elif [ -d $1 ]; then
      if [ $(_doDirectoryDiff $1 $2) -eq 1 ]; 
          then
              echo 1 # Directory content is different.
          else
              echo 0 # Directory content is the same.
      fi
  fi
}

#--------------------------------------------------------------------------------

function _restoreFromFileGuard()
{
  # Neat little trick to remove /*.kext from the trailing end of the target path
  local path=${2%/*.kext}

  #
  # First we check if the target file exist.
  #
  if [ $(_fileExists $path) -eq 1 ]; then
      #
      # If it does, then make a backup copy of the file.
      #
      `/usr/bin/sudo /bin/cp -Rp $2 $2.new`
  fi

  #
  # Restore file from FileGuard storage.
  #
  `/usr/bin/sudo /bin/cp -Rp $1 $path`

  echo "File restored from FileGuard: $2"
}

#-------------------------------------------------------------------------------

function _fileExists()
{
  if [ -e $1 ]; # file (-f) or directory (-d) 
      then
          echo 1 # "File exists"
      else
          echo 0 # "File does not exist"
  fi
}

#-------------------------------------------------------------------------------

function _addFileToStorage()
{
  # Strip filename from path.
  local TARGET_PATH=${1%/*}

  # Check target path (directory).
  if [ ! -d $TARGET_PATH ]; then
      # Target path not found (add directory).
      `/usr/bin/sudo /bin/mkdir -p $TARGET_PATH`
  fi

  if [ -s $2 ];
      then
          # Copy file from the OS X location to /Extra/FileGuard/Files/..
          `/usr/bin/sudo /bin/cp -Rp $2 $1`

          echo "NOTICE: File added to FileGuard: $1"
      else
          echo "NOTICE: File with zero length skipped: $1"
  fi
}

#-------------------------------------------------------------------------------

function _checkFile()
{
  local PATH=$1

  # A path starting with a forward slash must be followed (full path given).
  if [[ $PATH =~ ^/ ]]; 
      then # Full path given
          local SOURCE_FILE=${FILEGUARD_FILES}$PATH
          local TARGET_FILE=$PATH
      else # Assume Extensions directory
          local SOURCE_FILE=${FILEGUARD_EXTENSIONS}$PATH
          local TARGET_FILE=${EXTENSIONS_DIR}$PATH
  fi

  if [ $(_fileExists $SOURCE_FILE) -eq 1 ]; 
      then
          if [ $(_fileExists $TARGET_FILE) -eq 1 ]; 
              then
                  if [ $(_shouldRestore $SOURCE_FILE $TARGET_FILE) -eq 1 ]; 
                      then
                          echo $(_restoreFromFileGuard $SOURCE_FILE $TARGET_FILE)
                      else
                          echo "File checked: $TARGET_FILE"
                  fi
              else
                  echo $(_restoreFromFileGuard $SOURCE_FILE $TARGET_FILE)
          fi
      else
          echo "ERROR: File unavailable from FileGuard: $SOURCE_FILE"

          if [ $AUTOMATIC_SYNC -eq 1 ]; then
              echo $(_addFileToStorage $SOURCE_FILE $TARGET_FILE)
          fi
  fi
}

#--------------------------------------------------------------------------------

function _logfileTurnover
{
  local size=`/usr/bin/stat -f "%z" /var/log/FileGuardDaemon.log` 

  if [ $size -gt $MAXLOGSIZE ]; then
      local index=0 # index should increase (RFE: fix me).
      `/usr/bin/sudo /bin/mv -p /var/log/FileGuardDaemon.log /var/log/FileGuardDaemon.log.$index`
  fi
}

#--------------------------------------------------------------------------------

function _main()
{
  #
  # Check the filesize of our logfile.
  #
  _logfileTurnover

  echo "\nFileGuard daemon - file check started on" `date "+%d-%m-%Y @ %H:%M:%S"`
  echo "--------------------------------------------------------------"

  local watchPaths=(`defaults read ${fgConfigPlist} WatchPaths | tr '\n' ' ' | sed 's/(//;s/ *//g;s/\"//g;s/,/ /g;s/)//'`)

  #
  # Catching the 'bad array subscript' error (when the array is empty).
  #
  if [ ${#watchPaths[@]} -gt 0 ];
      then
          for element in $(seq 0 $((${#watchPaths[@]} - 1)))
          do
              echo $(_checkFile ${watchPaths[$element]})
          done
      else
          echo "Error: Watch list is (still) empty"
  fi

  echo "--------------------------------------------------------------"
  echo "FileGuard daemon - file check finished\n"
}

#==================================== START =====================================

_main

exit 0

#--------------------------------------------------------------------------------

